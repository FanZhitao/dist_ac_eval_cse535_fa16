import sys
import time
import logging
import pprint
import configparser

from comp.application import Application
from msg.evalreqmvcc import EvalReqMvcc
from msg.evalrespmvcc import EvalRespMvcc
from comp.coordinator import Coordinator
from comp.coordinatormvcc import CoordinatorMvcc
from comp.worker import Worker
from db.db import DB
from util.router import Router
from util.analyzer import Analyzer

#log = logging.getLogger('Master')
log = logging.LoggerAdapter(logging.getLogger("Master"), {})

"""
 Master is the bootstrap process of whole system which reads configuration file 
 and starts all other processes to make system ready for testing.
"""

class Sender(process):
    def setup(co, router, analyzer): pass
    def run():
        for c in co:
            send(('prepare', router, analyzer,), to=c)


class MockWorker(process):

    def setup(cfg):
        logging.basicConfig(level=logging.INFO, 
            format='[%(asctime)s] %(name)s:%(levelname)s: %(message)s')

    def run():
        while True:
            await(received(('done')))

    def receive(msg=('assigneval', req), from_=p):
        log.info('MockWorker - Received coordinator request #seq=[%d]', req.seq)
        resp = EvalRespMvcc(req)
        resp.updatedObj = 2 # Suppose correctly predict
        resp.rdonlydObj = 1
        if req.seq == 1:
            resp.updates = { 'history': req.resource }
        else:
            resp.updates = dict()
        resp.readAttr[1] = list()
        resp.readAttr[2] = list()
        resp.readAttr[2].append('history')

        key = 'req' + str(req.seq) + '.worker.delay'
        if key in cfg:
            delay = cfg[key]
            log.info('***** Delay *****: #seq=[%d] delay %f(s) at worker', req.seq, float(delay))
            time.sleep(float(delay))
        send(('respeval', resp), to=p)
        log.info('MockWorker - Send evalution result of #seq=[%d] back', req.seq)


def print_config(cfg, workload):
    log.info('=' * 20)
    for section in cfg.keys():
        if section.startswith('workload') and section != workload:
            continue
        log.info('[%s]', section)
        for key, val in cfg[section].items():
            log.info('%s=%s', key, val)
        log.info('')
    log.info('=' * 20)

def main():
    # 0.Read config. Set logger.
    logging.basicConfig(level=logging.INFO, 
        format='[%(asctime)s] %(name)s:%(levelname)s: %(message)s')
    cfg = configparser.ConfigParser()
    cfg.read(sys.argv[1]);
    workload = sys.argv[2]
    mode = "mvcc"
    print_config(cfg, workload)

    # 1.Create and start DB and workers on remote node
    path_policy = './src/db/' + cfg['db']['policy']
    path_record = './src/db/' + cfg['db']['record']
    db = new(DB, args=(path_policy, path_record, cfg['db']['minDBlatency'], cfg['db']['maxDBlatency'], None), at='DbNode')
    #start(db) TODO message too big exception?
    log.info("Start Database instance")

    # 2.Create and start coordinators and correspondent worker on remote node
    co = list()
    for i in range(1, int(cfg['master']['coordinators']) + 1):
        nodei = "CoordNode-" + str(i)
        w = new(Worker, (db,), at=nodei)
        mw = new(MockWorker, (cfg[workload],), at=nodei)
        c = new(Coordinator if mode == "oplock" else CoordinatorMvcc, (w, db, cfg[workload], mw), at=nodei)
        start(w)
        start(mw)
        start(c)
        co.append(c)
        log.info("Start a pair of Coordinator and Worker on Node [%s]", nodei) 

    # 3.Prepare coordinator with router table and analyzer
    # Assign role to coordinators according to total number of subjects and resources
    analyzer = Analyzer(path_policy)
    router = Router()
    router.assign(analyzer.subjects, analyzer.resources, co)
    # Analyze policy
    sender = new(Sender, (co, router, analyzer))
    start(sender)
    time.sleep(1)

    # 4.Create application as client and start testing
    #   Divide total requests evenly and assign sequence number of request to each application
    appno = int(cfg['master']['clients'])
    reqno = int(int(cfg[workload]['reqno']) / appno)
    apps = new(Application, num=appno)
    for i, app in zip(range(0, appno), apps):
        setup(app, (router, i * reqno + 1, (i + 1) * reqno + 1, cfg[workload], analyzer, mode,))
    start(apps)

    # 5.Dump database content periodically for testing
    while True:
        time.sleep(5)
        send(('dumpdb'), to=db)

