import sys
import logging
import configparser

from comp.application import Application
from comp.coordinator import Coordinator
from comp.worker import Worker
from db.db import DB
from util.router import Router

log = logging.getLogger('Master')

class Master(process):

    def setup():
        self.subjects = None
        self.resources = None

    def run():
        cfg = configparser.ConfigParser()
        cfg.read(sys.argv[1]);
        workload = sys.argv[2]

        print_config(cfg, workload)

        db = new(DB, num=1)
        # setup paramters
        # 1st: policy filename
        # 2nd: min latency
        # 3rd: max latency
        path = './src/db/' + cfg['db']['policy']

        # Start workers
        w = new(Worker, (db,), num=int(cfg['master']['workers']))
        start(w)

        setup(db, (path, cfg['db']['minDBlatency'], cfg['db']['maxDBlatency'], w))
        start(db)

        # Start coordinators
        co = new(Coordinator, (w, db, cfg[workload],), num=int(cfg['master']['coordinators']))
        start(co)

        # Distribute subjects/resource to coordinator pool uniformly
        log.info("Send get subjects request to database [%s]", db)
        send('getsubs', to=db)
        log.info("Send get resources request to database [%s]", db)
        send('getresos', to=db)
        #await((self.subjects != None and self.resources != None)) # not working
        router = Router()
        router.assign(get_subjects(), get_resources(), co)
        for c in co:
            send(('routetbl', router,), to=c)

        # Start application to test: divide total request into each App
        appno = int(cfg['master']['clients'])
        reqno = int(int(cfg[workload]['reqno']) / appno)
        apps = new(Application, num=appno)
        for i, app in zip(range(0, appno), apps):
            setup(app, (router, i * reqno + 1, (i + 1) * reqno + 1, cfg[workload], get_subjects(), get_resources()))
        start(apps)

    def get_subjects():
        self.subjects = ["subject1", "subject2"] # temp
        return self.subjects

    def get_resources():
        self.resources = ["resource1", "resource2"] # temp
        return self.resources

    def print_config(cfg, workload):
        log.info('=' * 20)
        for section in cfg.keys():
            if section.startswith('workload') and section != workload:
                continue
            log.info('[%s]', section)
            for key, val in cfg[section].items():
                log.info('%s=%s', key, val)
            log.info('')
        log.info('=' * 20)

    def receive(msg=('subs', subs), from_=db):
        log.info("Received subjects from database [%s]", db)
        self.subjects = subs
        log.info("subjects: %s", subs)

    def receive(msg=('resos', resos), from_=db):
        log.info("Received resources from database [%s]", db)
        self.resources = resos
        log.info("resources: %s", resos)

def main():
    #config(channel= 'fifo')
    setup()
    start(new(Master))

