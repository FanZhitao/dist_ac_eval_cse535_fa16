import sys
import xml.etree.ElementTree as ET
import random
import logging
import asyncio

log = logging.getLogger('DB')

class DB(process):
    def setup(policy_filename:str, minDBlatency:int, maxDBlatency:int, workers:set):
        log.info("DB %s is setting up.", self)
        log.info("parsing policy file: %s", policy_filename)
        tree = ET.parse(policy_filename)
        root = tree.getroot()
        self.rules = {}
        for rule in root.iter('rule'):
            self.rules['subjectCondition'] = rule.find('subjectCondition')
            self.rules['resourceCondition'] = rule.find('resourceCondition')
            self.rules['action'] = rule.find('action')
            self.rules['subjectUpdate'] = rule.find('subjectUpdate')
            self.rules['resourceUpdate'] = rule.find('resourceUpdate')
        log.info("min and max latency: %s, %s", minDBlatency, maxDBlatency)
        log.info("creating initial records")
        self.records = {}
        # TODO: needs to know all subjects & resources here?
        log.info("DB setup finished.")

    def run():
        log.info("DB %s is up.", self)
        while True:
            await(received(()))

    def receive(msg=('getpolicy'), from_=p):
        log.info("DB received policy request message from worker %s", p)
        send(('policy', self.rules), to=p)

    def receive(msg=('getrecords'), from_=p):
        log.info("DB received records request message from worker %s", p)

        # picks a latency l uniformly at random from
        # the interval between the specified min and
        # max, and makes the update visible to all
        # workers after delay l
        l = random.randrange(minDBlatency, maxDBlatency, 1)
        log.info("picked random number: %d", l)
		# await asyncio.sleep(latency)
        # TODO: update records

        log.info("making the update visible to all workers after delay %d", l)
        send(('records', self.records), to=workers)
        log.info("DB sent updated records to all workers.")


def main():
    tree = ET.parse('policy.xml')
    root = tree.getroot()
    for rule in root.iter('rule'):
        print('rule', rule.attrib['name'])
        sc=rule.find('subjectCondition')
        print('subject condition', sc.attrib)
        rc=rule.find('resourceCondition')
        print('resource condition', rc.attrib)
        act=rule.find('action')
        print('action', act.attrib)
        su=rule.find('subjectUpdate')
        if su != None:
            print('subject update', su.attrib)
        ru=rule.find('resourceUpdate')
        if ru != None:
            print('resource update', ru.attrib)
        print()
