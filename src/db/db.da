import sys
import xml.etree.ElementTree as ET
import random
import logging
import asyncio

from msg.commitresp import CommitResp

log = logging.getLogger('DB')

class DB(process):
    def setup(policy_filename:str, minDBlatency:int, maxDBlatency:int, workers:set):
        log.info("DB %s is setting up.", self)
        log.info("parsing policy file: %s", policy_filename)
        tree = ET.parse(policy_filename)
        self.rules = tree.getroot()
        self.subattrs = {}
        self.resattrs = {}
        log.info("min and max latency: %s, %s", minDBlatency, maxDBlatency)
        log.info("DB setup finished.")

    def run():
        log.info("DB %s is up.", self)
        while True:
            await(received(()))

    def receive(msg=('getpolicy'), from_=p):
        log.info("DB received policy request message from worker %s", p)
        send(('policy', self.rules), to=p)

    def receive(msg=('writesubattr', tattr:dict), from_=p):
        # taatr format: {subid, [{attr, (val, ts, _)},]}
        log.info("Received write attribute messages from subject coordinator [%s]", p)
        subject_id = next(iter(tattr))
        record_in_db = self.subattrs.get(subject_id)
        record_received = tattr.get(subject_id)
        log.info("Trying to update %s with %s if necessary.", record_in_db, record_received)
        # Check if received record is newer then current in database.
