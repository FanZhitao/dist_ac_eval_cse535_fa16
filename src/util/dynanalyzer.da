
import logging
import operator
from collections import Counter

from util.analyzer import Analyzer

SUB_READ = 0
SUB_UPD  = 1
RES_READ = 2
RES_UPD  = 3

log = logging.getLogger(__name__)

class DynAnalyzer(Analyzer):

    def __init__(self, analyzer):
        self.admin = None
        self.policy = analyzer.policy

    def defReadAttr(self, obj, req):
        """
        Determine definite read attributes as those appear in every matched rule
        """
        defR = None
        idx = SUB_READ if obj == req.subject else RES_READ
        for rule in self.policy[(req.subject, req.resource, req.action)]:
            if defR is None:
                defR = rule[idx].copy()
            else:
                defR &= rule[idx]
        return defR

    def mightReadAttr(self, obj, req):
        allR = None
        idx = SUB_READ if obj == req.subject else RES_READ
        for rule in self.policy[(req.subject, req.resource, req.action)]:
            if allR is None:
                allR = rule[idx].copy()
            else:
                allR |= rule[idx]
        return allR - self.defReadAttr(obj, req)

    def mightWriteAttr(self, obj, req):
        mgtW = None
        idx = SUB_UPD if obj == req.subject else RES_UPD
        for rule in self.policy[(req.subject, req.resource, req.action)]:
            if mgtW is None:
                mgtW = rule[idx].copy()
            else:
                mgtW |= rule[idx]
        return mgtW

