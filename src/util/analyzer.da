
import sys
import logging
import xml.etree.ElementTree as ET

SUB_READ = 0
SUB_UPD  = 1
RES_READ = 2
RES_UPD  = 3

"""
Static analyzer that preread policy rule from database to make decision of:
    Which object could possibly be involved in write
    Which object should be accessed first to reduce latency
    Is the request readonly
"""

log = logging.getLogger(__name__)

class Analyzer:

    def __init__(self, policyfile):
        logging.basicConfig(level=logging.INFO, 
            format='[%(asctime)s] %(name)s:%(levelname)s: %(message)s')
        self.policy = dict()
        self.subjects = set()
        self.resources = set()
        self.actions = set()
        self.parse_policy(policyfile, self.policy)
        self.dump_result(self.policy)

    def parse_policy(self, policyfile, policy):
        log.info("Start parsing policy file [%s]", policyfile)
        tree = ET.parse(policyfile)
        for rule in tree.getroot().iter('rule'):
            subject = rule.find('subjectCondition').attrib.get('id')
            resource = rule.find('resourceCondition').attrib.get('id')
            action = rule.find('action').attrib.get('name')

            self.subjects.add(subject)
            self.resources.add(resource)
            self.actions.add(action)

            if (subject, resource, action) not in policy:
                policy[(subject, resource, action)] = list()
            cur = [set(), set(), set(), set()]
            policy[(subject, resource, action)].append(cur)

            # Analyze potential read/update attributes in each rule
            for attr in rule.find('subjectCondition').attrib:
                if attr == 'id' or attr == 'position': continue
                cur[SUB_READ].add(attr)
            for attr in rule.find('resourceCondition').attrib:
                if attr == 'id': continue
                cur[RES_READ].add(attr)
            if rule.find('subjectUpdate') is not None:
                for attr in rule.find('subjectUpdate').attrib:
                    cur[SUB_UPD].add(attr)
            if rule.find('resourceUpdate') is not None:
                for attr in rule.find('resourceUpdate').attrib:
                    cur[RES_UPD].add(attr)
        log.info("Parse policy file complete")

    def dump_result(self, policy):
        log.info('=' * 20)
        for (sub, res, act), rules in policy.items():
            log.info("=== Subject [%s], Resource [%s], Action [%s] ===", sub, res, act)
            for i, result in enumerate(rules):
                log.info(" == Analysis Result of Rule %d ==", i)
                log.info(" Subject attrs read: %s", result[SUB_READ])
                log.info(" Resource attrs read: %s", result[RES_READ])
                log.info(" Subject attrs update: %s", result[SUB_UPD])
                log.info(" Resource attrs update: %s", result[RES_UPD])
        log.info('=' * 20)

    def obj(self, req, i):
        wrtobj = self.mightWriteObj(req)
        # If written object is decided, choose it as second to process
        # Otherwise (readonly request or more than 1 written object which cannot be decided)
        # Choose subject as the first object to handle randomly
        if len(wrtobj) == 1:
            rdobj = req.subject if req.subject != wrtobj[0] else req.resource
            return rdobj if i == 1 else wrtobj[0]
        else:
            return req.resource if i == 1 else req.subject

    def readonly(self, req):
        return not self.mightWriteObj(req)

    def mightWriteObj(self, req):
        wrtobj = list()
        for rule in self.policy[(req.subject, req.resource, req.action)]:
            if rule[SUB_UPD]:
                wrtobj.append(req.subject)
                break
        for rule in self.policy[(req.subject, req.resource, req.action)]:
            if rule[RES_UPD]:
                wrtobj.append(req.resource)
                break
        return wrtobj

    def subattr(self, req):
        o = self.obj(req, 1)
        log.info(req.cachedUpdates)
        if o == req.subject:
            return req.cachedUpdates[1][req.subject]
        else:
            return req.cachedUpdates[2][req.subject]

    def resattr(self, req):
        o = self.obj(req, 1)
        if o == req.subject:
            return req.cachedUpdates[2][req.resource]
        else:
            return req.cachedUpdates[1][req.resource]

