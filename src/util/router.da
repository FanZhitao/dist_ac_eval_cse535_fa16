import logging

log = logging.getLogger('Router')

class Router:

    def __init__(self):
        self.scmap = dict()
        self.rcmap = dict()

    def assign(self, subjects, resources, coordinators):
        co = list(coordinators)
        total = len(co)
        free = total
        occupy = [False] * total

        for sub in subjects:
            idx = hash(sub) % total
            if occupy[idx] is True and free > 0:
                idx = self.search_free_co(free, occupy)
                free -= 1
            log.info("Assign subject=[%s] to coordinator=[%s]", sub, co[idx]) 
            self.scmap[sub] = co[idx]
            occupy[idx] = True

        for res in resources:
            idx = hash(res) % total
            if occupy[idx] is True and free > 0:
                idx = self.search_free_co(free, occupy)
                free -= 1
            log.info("Assign resource=[%s] to coordinator=[%s]", res, co[idx]) 
            self.rcmap[res] = co[idx]
            occupy[idx] = True

    def search_free_co(self, free, occupy):
        for i in range(len(occupy)):
            if occupy[i] is False:
                occupy[i] = True
                return i

    def getSC(self, sub):
        #log.info(pprint.pformat(self.scmap))
        return self.scmap[sub]

    def getRC(self, res):
        #log.info(pprint.pformat(self.rcmap))
        return self.rcmap[res]

