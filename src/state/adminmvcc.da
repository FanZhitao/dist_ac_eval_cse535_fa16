import logging
import pprint
import time

#from state.adminmvcc import Version

log = logging.getLogger("AdminMvcc")

class AdminMvcc:

    def __init__(self, window):
        self.subcache = dict()
        self.rescache = dict()
        self.versions = dict()
        self.window = window

    def commit_cache(self, x, updates, ts):
        cache = self.subcache if x in self.subcache else self.rescache
        for attr, newval in updates.items():
            cache[x][attr] = (newval, ts)

    def update_version(self, x, updates, ts):
        for attr, _ in updates.items():
            self.versions[x][attr].append(Version(ts, ts))

    def now(self):
        return time.time()

    def cachedUpates(self, x, req):
        cache = dict()
        if x in self.subcache:
            cache = self.subcache[x]
        elif x in self.rescache:
            cache = self.rescache[x]

        # Remove entry if alive longer than inconsitent window of attribute DB
        window = 10000 #TODO
        for attr, _, ts in cache:
            if self.now() - ts >= window:
                del cache[attr]
        return cache

    def latestVersionBefore(self, x, attr, ts):
        if x not in self.versions:
            self.versions[x] = dict()

        if attr not in self.versions[x]:
            self.versions[x][attr] = list()
            self.versions[x][attr].append(Version(0, 0))

        # Search from beginning to find latest version
        latest = None
        for v in self.versions[x][attr]:
            if v.wts <= ts and latest.wts < v.wts:
                latest = v
        return latest

class Version:

    def __init__(self, rts, wts):
        self.rts = 0
        self.wts = 0
        self.pendingMightRead = list()

