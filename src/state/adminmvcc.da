import logging
import pprint
import time

log = logging.getLogger("AdminMvcc")

class AdminMvcc:

    def __init__(self):
        self.subcache = dict()
        self.rescache = dict()
        self.versions = dict()

    def init_subcache(self, subattrs):
        subid = subattrs[0]
        data = subattrs[1]
        self.subcache[subid] = dict()
        for attr, val, ts in data.items():
            self.subcache[subid][attr] = (val, ts)
        log.info('Init subject cache \n%s', pprint.pformat(subattrs))

    def init_rescache(self, resattrs):
        resid = resattrs[0]
        data = resattrs[1]
        self.rescache[resid] = dict()
        for attr, val, ts in data.items():
            self.rescache[resid][attr] = (val, ts)
        log.info('Init resource cache \n%s', pprint.pformat(resattrs))

    def commit_cache(self, x, updates, ts):
        cache = self.subcache if x in self.subcache else self.rescache
        for attr, newval in updates.items():
            cache[x][attr] = (newval, ts)

    def update_version(self, x, updates, ts):
        for attr, _ in updates.items():
            versions[x][attr].append(Version(ts, ts))

    def now():
        return time.time()

    def cachedUpates(x, req):
        if x in self.subcache:
            return self.subcache[x]
        else:
            return self.rescache[x]

    def latestVersionBefore(x, attr, ts):
        if x not in versions:
            versions[x] = dict()
        if attr not in versions[x]:
            versions[x][attr] = list()
            versions[x][attr].append(Version(0, 0))
        return versions[x][attr][-1]

    def latestVersion(x, attr):
        return latestVersionBefore(x, attr, now())

class Version:

    def __init__(self):
        self.rts = 0
        self.wts = 0
        self.pendingMightRead = list()

