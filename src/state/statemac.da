import logging
import pprint
import time
from enum import Enum

log = logging.getLogger("StateMac")

State = Enum('State', 
        'init, reqapp, respeval, respcommit, reqeval, reqcommit, restart, complete') 

VAL = 0
TS = 1
ID = 2

class StateMac:

    def __init__(self, req):
        """
        subdep: subject of current evaluation dependency info
                <attr, (val, ts, reqid)>
        resdep: resource of current evaluation dependency info
                <attr, (val, ts)>
        """
        self.state = State.init
        self.id = req.id
        self.subid = req.subject
        self.resid = req.resource
        self.subdep = dict()
        self.resdep = dict()

    def reqapp(self, tattrs):
        for attr, (reqid, val, ts) in tattrs.items():
            self.subdep[attr] = (reqid, val, ts)
        self.state = State.reqapp
        log.info('Subject attr dependency: %s', pprint.pformat(self.subdep))

    def respeval(self, resp, deps, tattrs):
        log.info('Checking... tattr cache is: %s', pprint.pformat(tattrs))
        # 1.Tentative update dependency check
        for attr in resp.subrattr:
            depid = self.subdep[attr][ID]
            if depid is None:
                continue

            depstate = deps[depid].state
            if depstate == State.restart:
                log.warn("***** Conflict *****: Req-[%s] rely on tentative-update Req-[%s] which failed on attr-[%s]", resp.id, depid, attr)
                self.state = State.restart
                return False

            while depstate != State.complete:
                log.warn("***** Conflict *****: Req-[%s] wait for Req-[%s] complete on attr-[%s]", resp.id, depid, attr)
                depstate = deps[depid].state
                log.info('State is: %s', depstate)
                time.sleep(5)

        # 2.Subject update conflict check
        for attr in resp.subrattr:
            if self.subdep[attr][TS] != tattrs[attr][TS]:
                log.warn("***** Conflict *****: Req-[%s] subject-update conflict with Req-[%s] on attr-[%s]", resp.id, tattrs[attr][ID], attr)
                self.state = State.restart
                return False
        return True

    def reqeval(self, attrs):
        for attr, (val, ts) in attrs.items():
            self.resdep[attr] = (val, ts)
        self.state = State.reqeval
        log.info('Resource attr dependency: %s', pprint.pformat(self.resdep))

    def reqcommit(self, resp, attrs):
        log.info('Checking... resource cache is: %s', pprint.pformat(attrs))
        for attr in resp.resrattr:
            if self.resdep[attr][TS] != attrs[attr][TS]:
                log.warn("***** Conflict *****: Req-[%s] resource-update conflict on attr-[%s]", resp.id, attr)
                self.state = State.restart
                return False
        self.state = State.reqcommit
        return True

    def complete(self):
        self.state = State.complete

