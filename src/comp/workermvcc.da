import logging
from util.router import Router
from util.analyzer import Analyzer
from util.dynanalyzer import DynAnalyzer
from msg.evalreqmvcc import EvalReqMvcc
from msg.evalrespmvcc import EvalRespMvcc
from msg.commitreq import CommitReq
from msg.commitresp import CommitResp
from msg.evalrespmvcc import Decision
import time

log = logging.getLogger('Worker')

class WorkerMvcc(process):
    def setup(db:set, cfg):
        logging.basicConfig(level=logging.INFO, 
            format='[%(asctime)s] %(name)s:%(levelname)s: %(message)s')
        self.policy = None
        self.router = None
        self.analyzer = None
        self.predictCorrect = False
        
    def run():
        log.info("Worker %s is up.", self)
        p = next(iter(db))
        send(('getpolicy'), to=p)
        log.info("Sending message to database %s to fetch policy and waiting for response.", db)
        while True:
            await(received(()))

    def receive(msg=('prepare', router, analyzer)):
        log.info("Worker - Received route table and analyzer")
        self.router = router
        self.analyzer = DynAnalyzer(analyzer)

    def receive(msg=('assigneval', req), from_=c):
        log.info("Received evaluation request from coodinator: %s", c)

        # In case not received policy from database yet.
        if self.policy == None:
            log.debug("No policy received yet. Waiting for response from database.")
            await(received(('policy')))

        # Cases need to update cache by loading from database
        if len(req.cachedUpdates[1]) == 0 and len(req.cachedUpdates[2]) == 0:
            send(('getattrs', req), to=db)
        elif 1 == 1:
            # no certain sub/res record
            # expired
            send(('getattrs', req), to=db)
        else:
            # cache is good
            process_evaluation(req)

    def receive(msg=('policy', policy), from_=p):
        log.info("Received policy data from database: %s", p)
        log.debug("policy: %s", policy)
        self.policy = policy

    def receive(msg=('attrs', attrs, req), from_=db):
        log.info("Received attributes from database: %s\nattrs: %s", db, attrs)
        o = self.analyzer.obj(req, 1)
        if o == req.subject:
            req.cachedUpdates[1] = attrs['sub']
            req.cachedUpdates[2] = attrs['res']
        else:
            req.cachedUpdates[1] = attrs['res']
            req.cachedUpdates[2] = attrs['sub']
        process_evaluation(req)

    def process_evaluation(req:EvalReqMvcc):
        # Evaluate the request.
        resp, rule = evaluate(req)
        if resp.decision == Decision.permit:
            # Has found a matched rule.
            # Add read and write attributes into
            # resq.{subrattr, subwattr, resrattr, reswattr}.
            resp = add_read_write_attributes(req, resp, rule)

        delay(req)
        if resp.updatedObj == -1:
            # req is read-only
            # send decision to app and obj1
            log.info("Sending decision to application %s", resp.app)
            send(('respapp', resp.seq, resp.decision,), to=resp.app)
            coord = self.router.route(self.analyzer.obj(req, 1))
            log.info("Sending evaluation response to coordinator %s", coord)
            send(('readAttr', resp, 1), to=coord)
            coord = self.router.route(self.analyzer.obj(req, 2))
            log.info("Sending evaluation response to coordinator %s", coord)
            send(('readAttr', resp, 2), to=coord)
        else:
            # req is write-one-object
            coord = self.router.route(self.analyzer.obj(req, resp.updatedObj))
            log.info("Sending evaluation response to coordinator %s", coord)
            send(('respeval', resp), to=coord)

    def evaluate(req:EvalReqMvcc):
        log.info("Start to evaluate req: [%d]", req.seq)
        resp = EvalRespMvcc(req) # construct response based on request
        resp.decision = Decision.deny
        matched_rule = None

        for rule in policy.iter('rule'): # rule is an ElementTree instance
            log.info("Trying to match rule [%s]", rule.attrib['name'])
            # check if conditions satisfy the current rule
            should_try_next_rule = False # flag used to continue outter for loop

            # subject
            should_try_next_rule = not do_attributes_match(rule.find('subjectCondition'), self.analyzer.subattr(req), req)
            if should_try_next_rule == True:
                continue
            log.debug("Subject condition satisfied.")

            # resource
            should_try_next_rule = not do_attributes_match(rule.find('resourceCondition'), self.analyzer.resattr(req), req)
            if should_try_next_rule == True:
                continue
            log.debug("Resource condition satisfied.")

            # action
            action_rule = rule.find('action')
            action_rule = action_rule.attrib['name']
            log.debug("Comparing action in rule: %s with %s", action_rule, req.action)
            if action_rule == req.action:
                # all subject, resource, and action satisfied
                log.debug("Action matched.")
                log.info("Corresponding rule found: [%s]. granting access...", rule.attrib['name'])
                resp.decision = Decision.permit
                matched_rule = rule
                break

        return (resp, matched_rule)

    def do_attributes_match(condition:Element, attributes_record:dict, req:EvalReqMvcc):
        log.debug("Comparing rule %s with %s", condition.attrib, attributes_record)
        for attribute_name in iter(condition.attrib):
            if attribute_name not in attributes_record.keys():
                # keys do not match
                log.debug('Key "%s" not found', attribute_name)
                return False

            # keys match, then check values
            log.debug('Key "%s" mathced, comparing values.', attribute_name)
            subattr = self.analyzer.subattr(req)
            resattr = self.analyzer.resattr(req)
            value_condition = condition.attrib[attribute_name]
            value_record = attributes_record.get(attribute_name)
            log.debug('rule:%s vs record:%s', value_condition, value_record)
            # need to deal with different value forms
            # case 1: $subject.ATTRIBUTE or $resource.ATTRIBUTE
            # keep replacing it with value it points until constant
            while isinstance(value_condition, str) and value_condition.startswith("$"):
                dot_index = value_condition.index(".")
                attribute_key = value_condition[dot_index + 1 :]
                sub_or_res = value_condition[1 : dot_index]
                if sub_or_res == 'subject':
                    value = subattr[attribute_key]
                elif sub_or_res == 'resource':
                    value = resattr[attribute_key]
                else:
                    # TODO: Throw invalid policy exception
                    return

                value_condition = value

            # case 2: <constant or >constant
            if isinstance(value_condition, str) and value_condition.startswith("<"):
                num_str = value_condition[1:]
                if not num_str.isnumeric():
                    # the attribute value is not a numberic string
                    return False

                # valid, then compare them
                num_condition = int(num_str)
                if value_record >= num_condition:
                    return False

            elif isinstance(value_condition, str) and value_condition.startswith(">"):
                num_str = value_condition[1:]
                if not num_str.isnumeric():
                    # the attribute value is not a numberic string
                    return False

                # valid, then compare them
                num_condition = int(num_str)
                if value_record <= num_condition:
                    return False

            # case 3: constant
            elif value_condition != value_record:
                return False

        # all passed
        return True

    def add_read_write_attributes(req:EvalReqMvcc, resp:EvalRespMvcc, rule:Element):
        # Copy attributes from request.
        # subject attributes
        subattr = self.analyzer.subattr(req)
        resattr = self.analyzer.resattr(req)
        log.debug("subattr: %s", subattr)
        log.debug("resattr: %s", resattr)
        for attribute_name in subattr:
            #resp.subrattr.append(attribute_name) # read attributes
            value_original = subattr.get(attribute_name)
            # replace $subject.ATTRIBUTE with original value
            while value_original != None and isinstance(value_original, str) and value_original.startswith("$"):
                dot_index = value_original.index(".")
                attribute_key = value_original[dot_index + 1 :]
                sub_or_res = value_original[1 : dot_index]
                if sub_or_res == 'subject':
                    value = subattr[attribute_key]
                elif sub_or_res == 'resource':
                    value = resattr[attribute_key]
                else:
                    # TODO: Throw invalid policy exception
                    return

                value_original = value

            subattr[attribute_name] = value_original

        # resource attributes
        for attribute_name in resattr:
            #resp.resrattr.append(attribute_name) # read attributes
            value_original = resattr.get(attribute_name)
            # replace $resource.ATTRIBUTE with original value
            while value_original != None and isinstance(value_original, str) and value_original.startswith("$"):
                dot_index = value_original.index(".")
                attribute_key = value_original[dot_index + 1 :]
                sub_or_res = value_original[1 : dot_index]
                if sub_or_res == 'subject':
                    value = subattr[attribute_key]
                elif sub_or_res == 'resource':
                    value = resattr[attribute_key]
                else:
                    # TODO: Throw invalid policy exception
                    return

                value_original = value

            resattr[attribute_name] = value_original

        # Modify write attributes according to obligation
        # subject attributes update
        fulfill_obligation(rule, 'subjectUpdate', resp, req)
        # resource attributes update
        fulfill_obligation(rule, 'resourceUpdate', resp, req)

        if len(resp.updates) > 0:
            if self.predictCorrect:
                resp.updatedObj = 2
                resp.rdonlydObj = 1
            else:
                resp.updatedObj = 1
                resp.rdonlydObj = 2

            resp.readAttr[resp.updatedObj] = []
            for key in resp.updates:
                resp.readAttr[resp.updatedObj].append(key)
        else:
            resp.updatedObj = -1
            resp.rdonlydObj = -1

        return resp

    def fulfill_obligation(rule:Element, sub_or_res:str, resp:EvalRespMvcc, req:EvalReqMvcc):
        log.debug('Checking if %s obligation exists in rule:%s.', sub_or_res, rule)
        attrs_to_update = {}
        subattr = self.analyzer.subattr(req)
        resattr = self.analyzer.resattr(req)

        obligation_element = rule.find(sub_or_res)
        if obligation_element != None:
            log.debug("Fulfilling obligation.")
            attributes = obligation_element.attrib
            for attribute_name in attributes:
                value_to_update = attributes[attribute_name]
                log.debug("rule: %s=%s", attribute_name, value_to_update)
                # different update value forms
                # replace $subject.ATTRIBUTE with original value
                while value_to_update != None and isinstance(value_to_update, str) and value_to_update.startswith("$"):
                    dot_index = value_to_update.index(".")
                    attribute_key = value_to_update[dot_index + 1 :]
                    sub_or_res = value_to_update[1 : dot_index]
                    log.debug("Found $..., %s, %s", sub_or_res, attribute_key)
                    if sub_or_res == 'subject':
                        value = subattr[attribute_key]
                    elif sub_or_res == 'resource':
                        value = resattr[attribute_key]
                    else:
                        # TODO: Throw invalid policy exception
                        return

                    log.debug("replacing %s with %s", value_to_update, value)
                    value_to_update = value

                # case 1: ++ or --
                if value_to_update == '++' or value_to_update == '--':
                    # case 1.1: no such key exists -> create a new k,v pair with value 0
                    # e.g. viewCount
                    if not attribute_name in attrs_to_update:
                        attrs_to_update[attribute_name] = 0
                    attrs_to_update[attribute_name] += 1
                    log.debug("Obligation: %s=%s. New value: %d", attribute_name, value_to_update, attrs_to_update[attribute_name])
                    continue

                # case 2: constant -> write (or overwrite) the value
                attrs_to_update[attribute_name] = value_to_update
                log.debug("Obligation: %s=%s. New value: %s", attribute_name, value_to_update, attrs_to_update[attribute_name])

            wrtobj = self.analyzer.mightWriteObj(req)
            if (wrtobj == req.resource and sub_or_res == "resourceUpdate") or (wrtobj == req.subject and sub_or_res == "subjectUpdate"):
                self.predictCorrect = True
            else:
                self.predictCorrect = False

            resp.updates = attrs_to_update

    def delay(req):
        key = 'req' + str(req.seq) + '.worker.delay'
        if key in cfg:
            interval = cfg[key]
            log.info('***** Delay *****: #seq=[%d] delay %f(s) at worker', req.seq, float(interval))
            time.sleep(float(interval))

def main():
    # test cases to simlulate messages from resource coordinators
    resp = EvalRespMvcc()
