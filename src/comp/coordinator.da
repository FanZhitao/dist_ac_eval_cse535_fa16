import logging

from db.db import DB
from state.admin import Admin
from util.router import Router
from util.idgen import IdGen
from msg.request import Request
from msg.response import Response

log = logging.getLogger("Coordinator")

class Coordinator(process):

    def setup(workers:set, db:DB):
        self.router = None
        self.scadmin = Admin(db)
        self.rcadmin = Admin(db)
        self.idgen = IdGen("proc-1")
        #self.workers = list(workers)

    def run():
        log.info("Coordinator is up")
        while True:
            await(received(('done',)))

    def receive(msg=('routetbl', router,)):
        """
        SC/RC: Receive route table from master process
        """
        log.info("Received route table")
        self.router = router

    def receive(msg=('reqclient', req,), from_=p):
        """
        SC: Received request from client
        """
        log.info("SC: Incoming application request: subject=[%s]", req.subject)
        setup_admin_sc(req)
        prepare_eval_sc(req, p)
        rc = router.getRC(req.resource)
        send(('reqeval', req), to=rc)
        log.info("Sending evaluation request message to resource coodinator: %s", rc)

    def receive(msg=('respeval', resp,), from_=p):
        """
        SC: Receive evaluation result from worker
        """
        log.info("SC: Incoming evaluation response from RC")
        sm = self.scadmin.state(resp.id)
        deps = self.scadmin.all_state()
        tattr = self.scadmin.tattr_cache(resp.subject)
        if sm.respeval(resp, deps, tattr):
            update_tattr(resp)
        else:
            restart(resp.id, sm.state())
        send('done', to=resp.client)

    def receive(msg=('respcommit', resp,), from_=p):
        """
        SC: Receive RC commit result, check if success.
        """
        sm = self.scadmin.state(resp.id)
        if resp.success:
            commit_sub_to_db(resp)
        else:
            self.scadmin.clean_sub(resp.id)
            restart(resp.id, sm.state())

    def receive(msg=('reqeval', req,), from_=p):
        """
        RC: Receive evaluation request from SC
        """
        log.info("RC: Incoming evaluation request: resource=[%s] from subject coodinator: %s", req.resource, p)
        setup_admin_rc(req)
        prepare_eval_rc(req, p)

        resp = Response()
        resp.id = req.id
        resp.client = req.app
        resp.subject = req.subject
        resp.resource = req.resource
        send(('respeval', resp,), to=p)
        # pick a worker
        # round robin style
        #worker = self.workers[0]
        #send(('respeval', resp,), to=worker)

    def receive(msg=('reqcommit', resp,), from_=p):
        """
        RC: Receive commit request from SC
        """
        sm = self.rcadmin.state(resp.id)
        attrs = self.rcadmin.res_cache(resp.resource)
        if sm.reqcommit(resp, attrs):
            commit_res_to_db(resp)
        else:
            self.rcadmin.clean_res(resp.id)
            restart(resp.id, sm.state())

    def setup_admin_sc(req):
        self.scadmin.setup(req)
        tattrs = self.scadmin.tattr_cache(req.subject)
        sm = self.scadmin.state(req.id)
        sm.reqclient(tattrs)

    def setup_admin_rc(req):
        self.rcadmin.setup(req)
        attrs = self.rcadmin.res_cache(req.resource)
        sm = self.rcadmin.state(req.id)
        sm.reqeval(attrs)

    def prepare_eval_sc(req, p):
        req.id = self.idgen.next()
        req.app = p
        req.subattr = dict()
        tattrs = self.scadmin.tattr_cache(req.subject) 
        for attr, (_, val, _) in tattrs.items():
            req.subattr[attr] = val

    def prepare_eval_rc(req, p):
        req.sc = p
        req.resattr = dict()
        rescache = self.scadmin.res_cache(req.resource)
        for attr, (val, _) in rescache.items():
            req.resattr[attr] = val

    def update_tattr(resp):
        for attr, newval in resp.subwattr.items():
            self.scadmin.update_tattr(resp.subject, attr, resp.id, newval)

    def commit_sub_to_db(resp):
        pass

    def commit_res_to_db(resp):
        pass

    def restart(resp, phase):
        for attr in resp.subwattr:
            self.scadmin.rollback(attr)

        #if phase == Phase.Commit:
        #    pass
        # resend to SC
