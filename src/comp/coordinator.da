import logging
import threading

from util.router import Router
from msg.response import Response

log = logging.getLogger("Coordinator")

class Coordinator(process):

    #def setup(workers:set):
    def setup():
        self.router = None 
        self.lock = threading.Lock()
        self.cnt = 0
        self.tAttr = set()
        #self.workers = list(workers)

    def run():
        log.info("Coordinator is up")
        await(received(('done',)))

    def receive(msg=('routetbl', router,)):
        """
        Receive route table from master process
        """
        self.router = router

    def receive(msg=('reqclient', req,), from_=p):
        """
        SC Role: receive request from client
        """
        log.info("Incoming request: subject=[%s]", req.subject)
        assignId(req)
        populate(req, p)
        to_rc = router.getRC((req.resource))
        send(('reqeval', req,), to=to_rc)
        log.info("Sending evaluation request message to resource coodinator: %d", to_rc)

    def receive(msg=('respeval', resp,), from_=p):
        """
        SC Role: receive evaluate result from worker
        """
        log.info("Incoming response")
        if isConflict(resp):
            restart()
        else:
            updateTentativeAttr()
        send('done', to=resp.client)

    def receive(msg=('reqeval', req,), from_=p):
        """
        RC Role: receive evaluate request from SC
        """
        log.info("Incoming request: resource=[%s] from subject coodinator: %d", req.resource, p)
        resp = Response()
        resp.client = req.client
        # pick a worker
        # round robin style
        #worker = self.workers[0]
        #send(('respeval', resp,), to=worker)

    def receive(msg=('reqcommit', req,), from_=p):
        """
        RC Role: receive commit request from SC
        """
        pass

    def assignId(req):
        self.lock.acquire()
        req.id = cnt
        self.cnt += 1
        self.lock.release()

    def populate(req, p):
        req.client = p
        req.tAttr = tAttr

    def isConflict(resp):
        return False

    def updateTentativeAttr():
        pass

    def restart():
        pass

