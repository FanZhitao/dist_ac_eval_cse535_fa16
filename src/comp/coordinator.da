import logging

from db.db import DB
from state.admin import Admin
from util.router import Router
from util.idgen import IdGen
from msg.evalreq import EvalReq
from msg.evalresp import EvalResp
from msg.commitreq import CommitReq
from msg.commitresp import CommitResp

log = logging.getLogger("Coordinator")

class Coordinator(process):

    def setup(workers:set, db:DB):
        self.router = None
        self.scadmin = Admin(db)
        self.rcadmin = Admin(db)
        self.idgen = IdGen()
        #self.workers = list(workers)

    def run():
        log.info("Coordinator is up")
        while True:
            await(received(('done',)))

    def receive(msg=('routetbl', router,)):
        """
        SC/RC: Receive route table from master process
        """
        log.info("Received route table")
        self.router = router

    def receive(msg=('reqclient', req,), from_=p):
        """
        SC: Received request from client
        """
        log.info("SC - Incoming application request: subject=[%s]", req.subject)
        generate_global_id(req)
        setup_admin_sc(req)
        prepare_evalreq_sc(req)
        enqueue(req, p)
        rc = router.getRC(req.resource)
        send(('reqeval', req), to=rc)
        log.info("SC - Send evaluation request to RC: %s", rc)

    def receive(msg=('respeval', resp,), from_=p):
        """
        SC: Receive evaluation result from worker
        """
        log.info("SC - Incoming evaluation response from RC")
        if is_conflict(resp):
            restart(resp.id, sm.state())
        else:
            update_tattr(resp)
            req = prepare_commitreq(resp)
            send(('reqcommit', req), to=router.getRC(req.resource))
            log.info("SC - Send commit request to RC")

    def receive(msg=('respcommit', resp,), from_=p):
        """
        SC: Receive RC commit result, check if success.
        """
        if resp.conflict:
            self.scadmin.clean_sub(resp.id)
            restart(resp.id, None)
        else:
            commit_sub_to_db(resp)

    def receive(msg=('reqeval', req,), from_=p):
        """
        RC: Receive evaluation request from SC
        """
        log.info("RC - Incoming evaluation request: resource=[%s] from SC: %s", req.resource, p)
        setup_admin_rc(req)
        prepare_evalreq_rc(req, p)

        resp = EvalResp()
        resp.id = req.id
        resp.subject = req.subject
        resp.resource = req.resource
        resp.subrattr = ['attr1']
        resp.subwattr = {'attr2': 10}
        resp.resrattr = ['attr3']
        #resp.reswattr = {'attr3': 20}
        send(('respeval', resp,), to=p)
        # pick a worker
        # round robin style
        #worker = self.workers[0]
        #send(('respeval', resp,), to=worker)
        log.info("RC - Send evaluation response to SC: %s", p)

    def receive(msg=('reqcommit', resp,), from_=p):
        """
        RC: Receive commit request from SC
        """
        sm = self.rcadmin.state(resp.id)
        attrs = self.rcadmin.res_cache(resp.resource)
        if sm.reqcommit(resp, attrs):
            commit_res_to_db(resp)
            #send('done', to=resp.client)
        else:
            self.rcadmin.clean_res(resp.id)
            restart(resp.id, sm.state())

    def setup_admin_sc(req):
        self.scadmin.setup(req)
        tattrs = self.scadmin.tattr_cache(req.subject)
        sm = self.scadmin.state(req.id)
        sm.reqclient(tattrs)

    def setup_admin_rc(req):
        self.rcadmin.setup(req)
        attrs = self.rcadmin.res_cache(req.resource)
        sm = self.rcadmin.state(req.id)
        sm.reqeval(attrs)

    def generate_global_id(req):
        req.id = self.idgen.next()

    def prepare_evalreq_sc(req):
        req.subattr = dict()
        tattrs = self.scadmin.tattr_cache(req.subject) 
        for attr, (_, val, _) in tattrs.items():
            req.subattr[attr] = val

    def prepare_evalreq_rc(req, p):
        req.sc = p
        req.resattr = dict()
        attrs = self.rcadmin.res_cache(req.resource)
        for attr, (val, _) in attrs.items():
            req.resattr[attr] = val

    def prepare_commitreq(resp):
        req = CommitReq()
        req.id = resp.id
        req.subject = resp.subject
        req.resource = resp.resource
        req.resrattr = resp.resrattr
        req.reswattr = resp.reswattr
        return req

    def is_conflict(resp):
        sm = self.scadmin.state(resp.id)
        deps = self.scadmin.all_state()
        tattr = self.scadmin.tattr_cache(resp.subject)
        return sm.respeval(resp, deps, tattr) == False

    def enqueue(req, p):
        self.scadmin.push_into_queue((req, p))

    def update_tattr(resp):
        for attr, newval in resp.subwattr.items():
            self.scadmin.update_tattr(resp.subject, attr, resp.id, newval)

    def commit_sub_to_db(resp):
        pass

    def commit_res_to_db(resp):
        pass

    def restart(resp, phase):
        for attr in resp.subwattr:
            self.scadmin.rollback(attr)

        #if phase == Phase.Commit:
        #    pass
        # resend to SC
