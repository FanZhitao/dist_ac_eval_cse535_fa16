import logging
from queue import Queue
from enum import Enum

from util.router import Router
from util.admin import Admin
from util.idgen import IdGen
from msg.response import Response

log = logging.getLogger("Coordinator")

Phase = Enum('Phase', 'Eval', 'Commit')

class Coordinator(process):

    def setup(workers:set):
        self.router = None 
        self.subadmin = Admin(None)
        self.resadmin = Admin(None)
        self.idgen = IdGen("proc-1")
        self.reqs = Queue()
        #self.workers = list(workers)

    def run():
        log.info("Coordinator is up")

    def receive(msg=('routetbl', router,)):
        """
        Receive route table from master process
        """
        self.router = router

    def receive(msg=('reqclient', req,), from_=p):
        """
        SC Role: receive request from client
        """
        log.info("Incoming request: subject=[%s]", req.subject)
        assignId(req)
        populate(req, p)
        to_rc = router.getRC((req.resource))
        send(('reqeval', req), to=to_rc)
        log.info("Sending evaluation request message to resource coodinator: %d", to_rc)

    def receive(msg=('respeval', resp,), from_=p):
        """
        SC Role: receive evaluate result from worker
        """
        log.info("Incoming response")
        if is_conflict(resp):
            restart(resp.id, Phase.Eval)
        else:
            update_tattr(resp)
        send('done', to=resp.client)

    def receive(msg=('respcommit', resp,), from_=p):
        """
        SC Role: If RC failed to commit due to conflict or SC found conflict at this point
                 Possibly because dependent evaluation being restarted.
        """
        if resp.conflict or is_conflict(resp):
            restart(resp.id, Phase.Commit)
        else:
            commit_to_db(resp)

    def receive(msg=('reqeval', req,), from_=p):
        """
        RC Role: receive evaluate request from SC
        """
        log.info("Incoming request: resource=[%s] from subject coodinator: %d", req.resource, p)
        resp = Response()
        resp.client = req.client
        # pick a worker
        # round robin style
        #worker = self.workers[0]
        #send(('respeval', resp,), to=worker)

    def receive(msg=('reqcommit', req,), from_=p):
        """
        RC Role: receive commit request from SC
        """
        pass

    def assignId(req):
        req.id = self.idgen.next()

    def populate(req, p):
        req.client = p
        #req.tAttr = tAttr

    def is_conflict(resp):
        for attr, ts in resp.rattr:
            if self.subadmin.ts(attr) != ts:
                return True
        return False

    def update_tattr(resp):
        for attr, newval, ts in resp.wattr:
            self.subadmin.update(attr, newval, ts)

    def commit_to_db():
        pass

    def restart(resp, phase):
        """
        Rollback attributes of current evaluation
        This causes evaluations that depend on it being restarted implicitly
        """
        for attr in resp.wattr:
            self.subadmin.rollback(attr)

        if phase == Phase.Commit:
            pass
        # resend to SC

