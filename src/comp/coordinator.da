import logging
import time

from db.db import DB
from state.admin import Admin
from state.statemac import Conflict
from util.router import Router
from util.idgen import IdGen
from msg.evalreq import EvalReq
from msg.evalresp import EvalResp
from msg.commitreq import CommitReq
from msg.commitresp import CommitResp

log = logging.getLogger("Coordinator")

class Coordinator(process):

    def setup(workers:set, db:DB, cfg):
        self.router = None
        self.scadmin = Admin(db)
        self.rcadmin = Admin(db)
        self.idgen = IdGen()

    def run():
        log.info("Coordinator is up")
        while True:
            await(received(('done',)))

    def receive(msg=('routetbl', router,)):
        """
        SC/RC: Receive route table from master process
        """
        log.debug("Received route table")
        self.router = router

    def receive(msg=('reqapp', req,), from_=p):
        """
        SC: Received request from client
        """
        log.info("SC - Incoming application request: #seq=[%d] subject=[%s]", req.seq, req.subject)
        delay(req.seq, 'reqapp')

        generate_global_id(req)
        setup_admin_sc(req)
        prepare_evalreq_sc(req, p)
        enqueue(req.id)

        rc = router.getRC(req.resource)
        log.info("SC - Send evaluation request to RC: #seq=[%d], rc=%s\n",req.seq, rc)
        send(('reqeval', req), to=rc)

    def receive(msg=('respeval', resp), from_=p):
        """
        SC: Receive evaluation result from worker
        """
        log.info("SC - Incoming evaluation response from RC: #seq=[%d]", resp.seq)
        delay(resp.seq, 'respeval')

        while True:
            result, depid = is_tattr_or_sub_conflict(resp)
            if result != Conflict.delay:
                break
            await(some(received(('respcommit', depresp)), has= depresp.id==depid))

        if result == Conflict.yes:
            log.info('SC - Conflict found, restart: #seq=[%d]', resp.seq)
            dequeue(resp.id)
            cleanup_admin_sc(resp)
            send(('reqapp', EvalReq(resp)), to=router.getSC(resp.subject))
        else:
            log.info('SC - No conflict found, update tattr cache: #seq=[%d]', resp.seq)
            update_tattr(resp)
            req = prepare_commitreq(resp)
            log.info("SC - Send commit request to RC: #seq=[%d]\n", resp.seq)
            send(('reqcommit', req), to=router.getRC(req.resource))

    def receive(msg=('respcommit', resp,), from_=p):
        """
        SC: Receive RC commit result, check if success.
        """
        log.info("SC - Incoming commit response from RC: #seq=[%d]", resp.seq)
        delay(resp.seq, 'respcommit')
        if resp.conflict:
            log.info('SC - Commit conflict found: #seq=[%d]', resp.seq)
            dequeue(resp.id)
            rollback_tattr(resp)
            cleanup_admin_sc(resp)
            send(('reqapp', EvalReq(resp)), to=router.getSC(resp.subject))
        else:
            log.info('SC - No conflict found, commit subject updates to db: #seq=[%d]', resp.seq)
            dequeue(resp.id)
            commit_sub_to_db(resp)
            log.info("SC - Send application response: #seq=[%d]\n", resp.seq)
            send(('respapp', True,), to=resp.app)

    def receive(msg=('reqeval', req,), from_=p):
        """
        RC: Receive evaluation request from SC
        """
        log.info("RC - Incoming evaluation request: #seq=[%d] resource=[%s] sc=%s", req.seq, req.resource, p)
        delay(req.seq, 'reqeval')

        setup_admin_rc(req)
        prepare_evalreq_rc(req, p)

        # pick a worker
        # round robin style
        worker = next(iter(workers))
        send(('assigneval', req), to=worker)
        log.info("RC - Assign evalution request: #seq=[%d] to worker=[%s]\n", req.seq, worker)

        #log.info("RC - Send evaluation response to SC: #seq=[%d] worker=%s\n", req.seq, p)
        #send(('respeval', resp,), to=p)

    def receive(msg=('reqcommit', req,), from_=p):
        """
        RC: Receive commit request from SC
        """
        log.info("RC - Incoming commit request: #seq=[%d] resource=[%s] sc=%s", req.seq, req.resource, p)
        delay(req.seq, 'reqcommit')
        resp = prepare_commitresp(req)
        if is_res_conflict(req):
            log.info('RC - Conflict found: #seq=[%d]', req.seq)
            cleanup_admin_rc(req)
            resp.conflict = True
        else:
            log.info('RC - No conflict found, commit resource updates to db: #seq=[%d]', req.seq)
            commit_res_to_db(req)
            resp.conflict = False
        log.info("RC - Send commit response to SC: #seq=[%d] sc=%s\n", req.seq, p)
        send(('respcommit', resp), to=p)

    def generate_global_id(req):
        if req.id is None: # reuse same id for rc track and cleanup
            req.id = self.idgen.next()
        log.info('Assign globalID=[%s] to #seq=[%s]', req.id, req.seq)

    def setup_admin_sc(req):
        self.scadmin.setup(req)
        tattrs = self.scadmin.tattr_cache(req.subject)
        sm = self.scadmin.state(req.id)
        sm.reqapp(tattrs)
        self.scadmin.push_into_queue(req.id)

    def setup_admin_rc(req):
        if req.id in self.rcadmin.all_state():
            self.rcadmin.clean_state(req.id)
        self.rcadmin.setup(req)
        attrs = self.rcadmin.res_cache(req.resource)
        sm = self.rcadmin.state(req.id)
        sm.reqeval(attrs)

    def prepare_evalreq_sc(req, p):
        if req.app is None: # app isn't None if request from restart
            req.app = p
        req.subattr = dict()
        tattrs = self.scadmin.tattr_cache(req.subject) 
        for attr, (_, val, _) in tattrs.items():
            req.subattr[attr] = val

    def prepare_evalreq_rc(req, p):
        req.sc = p
        req.resattr = dict()
        attrs = self.rcadmin.res_cache(req.resource)
        for attr, (val, _) in attrs.items():
            req.resattr[attr] = val

    def prepare_commitreq(resp):
        req = CommitReq(resp)
        req.resrattr = resp.resrattr
        req.reswattr = resp.reswattr
        return req

    def prepare_commitresp(req):
        return CommitResp(req)

    def enqueue(reqid):
        self.scadmin.push_into_queue(reqid)

    def dequeue(reqid):
        self.scadmin.remove_from_queue(reqid)

    def is_tattr_or_sub_conflict(resp):
        return self.scadmin.is_tattr_or_sub_conflict(resp.id, resp.subrattr)

    def is_res_conflict(req):
        sm = self.rcadmin.state(req.id)
        attrs = self.rcadmin.res_cache(req.resource)
        return sm.reqcommit(req, attrs) == False

    def update_tattr(resp):
        self.scadmin.update_tattr(resp.subject, resp.subwattr, resp.id)

    def commit_sub_to_db(resp):
        sm = self.scadmin.state(resp.id)
        sm.complete()
        self.scadmin.commit_sub(resp.subject)

    def commit_res_to_db(req):
        sm = self.rcadmin.state(req.id)
        sm.complete()
        self.rcadmin.commit_res(req.resource, req.reswattr)

    def rollback_tattr(resp):
        self.scadmin.rollback_tattr(resp.id)

    def cleanup_admin_sc(resp):
        self.scadmin.clean_state(resp.id)

    def cleanup_admin_rc(req):
        self.rcadmin.clean_state(req.id)

    def delay(seq, method):
        key = 'req' + str(seq) + '.delay.' + method
        if key in cfg:
            log.info('***** Delay *****: #seq=[%d] %f(s) at [%s]', seq, float(cfg[key]), key)
            time.sleep(float(cfg[key]))

