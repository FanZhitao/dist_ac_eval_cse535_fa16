import logging
import time

log = logging.getLogger("Coordinator")

class CoordinatorMvcc(process):

    def setup(workers:set, db:DB, cfg):
        self.router = None
        self.admin = Admin(db)
        self.idgen = IdGen()

    def run():
        log.info("Coordinator [%s] is up", self)
        while True:
            await(received(('done')))

    def receive(msg=('prepare', router, subattrs, resattrs)):
        """
        Receive route table and subject/resource attribute list from master process
        """
        log.debug("CO - Received route table and subject/resource attribute list")
        self.router = router
        self.admin.init_subcache(subattrs)
        self.admin.init_rescache(resattrs)

    def receive(msg=('reqapp', req,), from_=p):
        """
        coord1: Received request from Application
        """
        log.info("Coord-1 - Incoming application request: #seq=[%d] subject=[%s]", req.seq, req.subject)
        delay(req.seq, 'reqapp')
        prepare(req, 1)
        sc = router.get_rc(obj(req, 1))
        log.info("Coord-2 - Send evaluation request to Coord-2: #seq=[%d], sc=%s\n", req.seq, sc)
        send(('reqeval', req), to=sc)

    def receive(msg=('reqeval', req,), from_=p):
        """
        coord2: Received request from Coordinator 1
        """
        log.info("Coord-2 - Incoming application request: #seq=[%d] object=[%s]", req.seq, obj(req, 2))
        delay(req.seq, 'reqapp')
        prepare(req, 2)
        worker = next(iter(workers))
        log.info("Coord2 - Assign evalution request: #seq=[%d] to worker=[%s]\n", req.seq, worker)
        send(('assigneval', req), to=worker)

    def receive(msg=('respeval', resp), from_=p):
        """
        coordW: Receive evaluation result from worker
        """
        log.info("CoordW - Incoming evaluation response from worker: #seq=[%d]", resp.seq)
        delay(resp.seq, 'respeval')
        x = obj(resp, resp.updatedObj)
        if not conflict():
            await()
            if not conflict():
                # commit update
                # update update ts

                send(('readAttr', resp, resp.rdonlydObj), to=get(obj(resp, resp.rdonlydObj)))
            else:
                pass
        else:
            pass



    def receive(msg=('readAttr', resp, i), from_=p):
        """
        coordR: Get notified that which attr in mightReadAttr is actually read
        """
        x = obj(req, i)
        log.info("Coord-%d - Incoming application request: #seq=[%d] object=[%s]", i, resp.seq, x)
        for attr in self.admin.mightReadAttr(x, req):
            v = self.admin.latestVersionBefore(x, attr, resp.ts)
            v.pendingMightRead.remove((resp.id, _))
            if attr in req.readAttr[i]:
                v.rts = req.ts

    def obj(req, idx):
        pass

    def prepare(req, i):
        # 1.Generate unique global ID
        if req.id is None:
            req.id = self.idgen.next()
            log.info('SC - Assign globalID=[%s] to #seq=[%s]', req.id, req.seq)

        # 2.Setup administration
        x = obj(req, i)
        req.ts = self.admin.now()
        defR = self.admin.defReadAttr(x, req)
        mgtR = self.admin.mightReadAttr(x, req)
        if read: #TODO App predefine req type or Coord analyze on its own?
            for attr in defR:
                self.admin.latestVersion(x, attr).rts = req.ts
            for attr in mgtR:
                self.admin.latestVersion(x, attr).pendingMightRead.add((req.id, req.ts))
        else:
            for attr in defR | mgtR:
                self.admin.latestVersion(x, attr).pendingMightRead.add((req.id, req.ts))

        # 3.Populate data piggybacked to request
        req.cachedUpdates[i] = self.admin.cacheUpdates(x, req)

    def delay(seq, method):
        key = 'req' + str(seq) + '.delay.' + method
        if key in cfg:
            log.info('***** Delay *****: #seq=[%d] %f(s) at [%s]', seq, float(cfg[key]), key)
            time.sleep(float(cfg[key]))

