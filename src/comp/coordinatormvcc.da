import logging
import time
import queue

from db.db import DB
from util.router import Router
from util.idgen import IdGen
from util.analyzer import Analyzer
from util.dynanalyzer import DynAnalyzer
from state.adminmvcc import AdminMvcc
from msg.evalreqmvcc import EvalReqMvcc
from msg.evalrespmvcc import EvalRespMvcc
from msg.evalrespmvcc import Decision

log = logging.getLogger("Coordinator")

class CoordinatorMvcc(process):

    def setup(workers:set, db:DB, cfg, mockworker, nodei):
        logging.basicConfig(level=logging.INFO, 
            format='[%(asctime)s] %(name)s:%(levelname)s: %(message)s')
        self.router = None
        self.analyzer = None
        self.admin = AdminMvcc(db)
        self.idgen = IdGen(nodei)
        self.activereq = set()
        self.pendingwrt = dict()

    def run():
        log.info("Coordinator [%s] is up", self)
        while True:
            await(received(('done')))

    def receive(msg=('prepare', router, analyzer)):
        """
        Receive route table and analyzer from master process
        """
        log.info("Coord - Received route table and analyzer")
        self.router = router
        self.analyzer = DynAnalyzer(analyzer)
        self.analyzer.admin = self.admin

    def receive(msg=('reqapp', req,), from_=p):
        """
        coord1: Received request from Application
        """
        log.info("Coord1 - Incoming application request: #seq=[%d] object=[%s], readonly=[%s]", req.seq, self.analyzer.obj(req, 1), self.analyzer.readonly(req))
        delay(req.seq, 'reqapp')

        if req.app is None:
            req.app = p
        handle_request(req, 1)
        nextco = self.router.route(self.analyzer.obj(req, 2))
        log.info("Coord1 - Send evaluation request to Coord2: #seq=[%d], to=%s\n", req.seq, nextco)
        send(('reqeval', req), to=nextco)

    def receive(msg=('reqeval', req,), from_=p):
        """
        coord2: Received request from Coordinator 1
        """
        log.info("Coord2 - Incoming application request: #seq=[%d] object=[%s]", req.seq, self.analyzer.obj(req, 2))
        delay(req.seq, 'reqeval')

        handle_request(req, 2)
        worker = next(iter(workers))
        log.info("Coord2 - Assign evalution request: #seq=[%d] to worker=[%s]\n", req.seq, worker)
        send(('assigneval', req), to=worker)
        #send(('assigneval', req), to=mockworker)
        #import pprint
        #log.info("***** " + pprint.pformat(vars(req)))

    def receive(msg=('respeval', resp), from_=p):
        """
        coordW: Receive evaluation result from worker
        """
        log.info("CoordW - Incoming evaluation response from worker: coord=[%d], #seq=[%d], object=[%s], decision=[%s], updates=[%s]", 
                resp.updatedObj, resp.seq, self.analyzer.obj(resp, resp.updatedObj), resp.decision, str(resp.updates))
        delay(resp.seq, 'respeval')

        x = self.analyzer.obj(resp, resp.updatedObj)
        if resp.decision != Decision.permit:
            cleanup_pending_update(x, resp)
            send(('respapp', resp.seq, resp.decision), to=resp.app)
            return
        # Break deadlock if there exist other earlier request
        for attr in resp.updates.keys():
            if (resp.id, resp.ts) in self.admin.latestVersionBefore(x, attr, resp.ts).pendingMightRead and any((reqid != resp.id and ts < resp.ts) for (reqid, ts) in self.admin.latestVersionBefore(x, attr, resp.ts).pendingMightRead):
                restart(x, resp)
                return

        dump_current_state(resp, x)
        if not conflict(x, resp):
            # Wait for all pending read complete
            possible = warning_potential_conflict(x, resp)
            await(each(attr in resp.updates.keys(),
                has= ((not self.admin.latestVersionBefore(x, attr, resp.ts).pendingMightRead) or
                        all(reqid == resp.id for (reqid, _) in self.admin.latestVersionBefore(x, attr, resp.ts).pendingMightRead))))
            if possible:
                log.warning("***** Wakeup *****: Request #seq=[%d]", resp.seq)

            if not conflict(x, resp):
                cleanup_pending_update(x, resp)

                # Commit update to database
                log.info("CoordW - Send attribute updates to database [%s]", self.db)
                send(('writeattr', resp, resp.updatedObj, x), to=self.db)

                # Commit update to cache and update version
                self.admin.commit_cache(x, resp)
                self.admin.update_version(x, resp)
                update_read_ts(resp, resp.updatedObj, 
                        self.analyzer.defReadAttr(x, resp) | self.analyzer.mightReadAttr(x, resp))

                # Notify application the evaluation result
                log.info("CoordW - Send evaluation result of request #seq=[%d] to application", resp.seq)
                send(('respapp', resp.seq, resp.decision), to=resp.app)

                # Notify other coordinator to update rts for attributes read
                coordR = self.router.route(self.analyzer.obj(resp, resp.rdonlydObj))
                log.info("CoordW - Send attribute read of request #seq=[%d] to CoordR [%s]", resp.seq, coordR)
                send(('readAttr', resp, resp.rdonlydObj), to=coordR)
                dump_current_state(resp, x)
            else:
                restart(x, resp)
        else:
            restart(x, resp)

    def receive(msg=('readAttr', resp, i), from_=p):
        """
        coordR: Get notified that which attr in mightReadAttr is actually read
        """
        x = self.analyzer.obj(resp, i)
        log.info("CoordR - Incoming readAttr request: coord=[%d], #seq=[%d], object=[%s], readAttr=[%s]", 
                i, resp.seq, x, str(resp.readAttr[i]))
        if not resp.readAttr[i]:
            return
        cleanup_pending_update(x, resp)
        update_read_ts(resp, i, self.analyzer.mightReadAttr(x, resp))
        log.info("CoordR - Update read ts of attr complete")

    def handle_request(req, i):
        # 1.Generate unique global ID
        if req.id is None:
            req.id = self.idgen.next()
            req.ts = self.admin.now()
            log.info('Coord%d - Assign globalID=[%s] and ts=[%d] to #seq=[%s]', i, req.id, req.ts, req.seq)

        # 2.Handle potential starvation proactively: delay readonly request
        prevent_starvation_proactively(req, i)

        # 3.Setup administration
        x = self.analyzer.obj(req, i)
        defR = self.analyzer.defReadAttr(x, req)
        mgtR = self.analyzer.mightReadAttr(x, req)
        if self.analyzer.readonly(req):
            for attr in defR:
                self.admin.latestVersionBefore(x, attr, req.ts).rts = req.ts
            for attr in mgtR:
                self.admin.latestVersionBefore(x, attr, req.ts).pendingMightRead.append((req.id, req.ts))
        else:
            for attr in defR | mgtR:
                self.admin.latestVersionBefore(x, attr, req.ts).pendingMightRead.append((req.id, req.ts))

        # 4.Populate data piggybacked to request
        req.cachedUpdates[i] = self.admin.cachedUpdates(x, req)
        log.info("\nCoord%d - Prepare request complete: #seq=[%d], object=[%s]" + 
                "\ndefRead=[%s], \nmightRead=[%s], \nversions=[%s], \npendingwrt=[%s], \ncachedUpdates=%s", 
                i, req.seq, x, defR, mgtR,
                self.admin.versions[x] if x in self.admin.versions else None, 
                self.pendingwrt[x] if x in self.pendingwrt else None,
                str(req.cachedUpdates))

    def prevent_starvation_proactively(req, i):
        x = self.analyzer.obj(req, i)
        if self.analyzer.readonly(req):
            if i == 2: # Only perform at Coordinator 1
                return
            defR = self.analyzer.defReadAttr(x, req)
            mgtR = self.analyzer.mightReadAttr(x, req)
            wrtreq = set()
            if x in pendingwrt:
                for attr in defR | mgtR:
                    if attr in pendingwrt[x] and not all(req2[1] > req.ts for req2 in pendingwrt[x][attr]):
                        wrtreq.update(pendingwrt[x][attr])

            if wrtreq:
                log.warning("Coord%d - ***** Pending ***** Request #seq=[%d]" + 
                        " due to potentially starving write request: %s", i, req.seq, wrtreq)

            await(each(attr in defR | mgtR,
                has= ((x not in pendingwrt) or
                    (attr not in pendingwrt[x]) or
                    all(req2[1] > req.ts for req2 in pendingwrt[x][attr]))))

            if wrtreq:
                log.warning("Coord%d - ***** Wakeup ***** Request #seq=[%d]", i, req.seq)
        else:
            for attr in self.analyzer.mightWriteAttr(x, req):
                if x not in pendingwrt:
                    pendingwrt[x] = dict()
                if attr not in pendingwrt[x]:
                    pendingwrt[x][attr] = set()
                pendingwrt[x][attr].add((req.id, req.ts))
                log.info("Coord%d - Request #seq=[%d] might write obj=[%s] attr=[%s]", i, req.seq, x, attr) 

    def update_read_ts(resp, i, attrs):
        x = self.analyzer.obj(resp, i)
        for attr in attrs:
            v = self.admin.latestVersionBefore(x, attr, resp.ts)
            #v.pendingMightRead.remove(resp.id)
            if attr in resp.readAttr[i]:
                v.rts = resp.ts

    def conflict(x, resp):
        for attr in resp.updates.keys():
            v = self.admin.latestVersionBefore(x, attr, resp.ts)
            if v.rts > resp.ts:
                log.warning("***** Conflict *****: Request #seq=[%d] conflicts!", resp.seq)
                return True
        log.info("CoordW - no conflict found for request #seq=[%d]", resp.seq)
        return False

    def restart(x, resp):
        cleanup_pending_update(x, resp)
        req = EvalReqMvcc(resp)
        req.id = None
        prevco = self.router.route(self.analyzer.obj(req, 1))
        send(('reqapp', req), to=prevco)
        log.warning("***** Restart *****: Request #seq=[%d]", resp.seq)

    def cleanup_pending_update(x, resp):
        for attr in self.analyzer.defReadAttr(x, resp) | self.analyzer.mightReadAttr(x, resp):
            v = self.admin.latestVersionBefore(x, attr, resp.ts)
            if (resp.id, resp.ts) in v.pendingMightRead:
                v.pendingMightRead.remove((resp.id, resp.ts))
        for attr in self.analyzer.mightWriteAttr(x, resp):
            if (resp.id, resp.ts) in pendingwrt[x][attr]:
                pendingwrt[x][attr].remove((resp.id, resp.ts))

    def warning_potential_conflict(x, resp):
        for attr in resp.updates.keys():
            for (reqid, _) in self.admin.latestVersionBefore(x, attr, resp.ts).pendingMightRead:
                if reqid != resp.id:
                    log.warning("CoordW - ***** Potential Conflict *****: Request #seq=[%d] id=[%s] against id=[%s] on attr [%s]", resp.seq, resp.id, reqid, attr)
                    return True
        return False

    def dump_current_state(resp, x):
        cache = self.admin.subcache if x == resp.subject else self.admin.rescache
        log.info("\nCoordW - === Current state dump for #seq=[%d] object=[%s] === " +
                "\nVersions=[%s] \nPending Writes=[%s], \nCache=%s",
                resp.seq, x,
                self.admin.versions[x] if x in self.admin.versions else None, 
                self.pendingwrt[x] if x in self.pendingwrt else None,
                cache[x] if x in cache else None)

    def delay(seq, method):
        key = 'req' + str(seq) + '.delay.' + method
        if key in cfg:
            log.info('***** Delay *****: #seq=[%d] %f(s) at [%s]', seq, float(cfg[key]), key)
            time.sleep(float(cfg[key]))

