
-- (I) Application
-- Step 1: Determines the coordinator that is responsible for the subject in question 
        -- based on the id of the subject and the list of coordinators
-- Step 2: Sends a policy evaluation request to this coordinator

forwardToSC(req):
    sc = lookup(req.subject)     --step 1
    send(sc, self, req)          --step 2
    resp = await()


-- (II) Subject Coordinator
-- Step 3: Assigns a globally unique id to this evaluation, 
        -- Sets up the administration for the subject, 
        -- Adds any tentatively updated attributes to the request, 
        -- Determines the coordinator responsible for the resource in question
-- Step 4: Forwards the authorization request to that coordinator
-- Step 9: Checks whether the evaluation employed subject attributes 
        -- that were updated in the mean while. 
        -- If not, it tentatively executes the updates of subject attributes
-- Step 10: Asks the coordinator responsible for the resource 
        -- whether there are conflicts for resource attributes
-- Step 13: Executes the tentative attribute updates, 
        -- Clears its administration for this evaluation
-- Step 14: Passes the decision along to the application

forwardToRC(app, req):
    assignId(req)               --step 3
    setupAdmin(req)
    addUpdatedAttr(req)
    rc = lookup(req.resource)
    send(rc, self, req)         --step 4

handleConflict(worker, resp):
    if !check(tAttr, resp.rAttr, resp.wAttr) --step 9
        restart()
        return
    add(tAttr, resp.wAttr)
    send(rc, self, req)         --step 10

handleCommit(worker, resp):
    commit(resp.wAttr)          --step 13
    send(app, resp)             --step 14

assignId(req):
    req.id = generate()

setupAdmin(req):
    req.scAdmin = createAdmin()

addUpdatedAttr(req):
    req.tAttr = tentativeAttrs

-- (III) Resource Coordinator
-- Step 5: Sets up the administration for the resource
-- Step 6: Assigns the request to a worker
-- Step 11: checks its administration, if there are no conflicts, 
        -- executes the updates of resource attributes, 
        -- clears its administration for this evaluation
-- Step 12: Acknowledges success to the first coordinator

forwardToWorker(sc, req):
    setupAdmin(req)             --step 5
    worker = getFromPool()
    send(worker, sc, req)       --step 6

checkConflict(sc, req):         --step 11
    if checkAdmin(req):
        updateResAttr()
    clearAdmin()
    ack(sc)                     --step 12

setupAdmin(req):
    req.rcAdmin = createAdmin()


-- (IV) Worker
-- Step 7: Evaluates the policy for this request
-- Step 8: Sends the result to the coordinator responsible for the subject

evaluatePolicy(sc, req):
    decision = doEvaluate(DB, req)
    rAttr = getReadAttr(DB, req)
    wAttr = getUpdateAttr(DB, req)
    resp = createResponse(req, decision, rAttr, wAttr)   --step 7
    send(sc, resp)                                       --step 8


-- High level Data Structure
-- 1.Request for policy evaluation
    -- subject: subject Id
    -- resource: resource Id
    -- id: assigned global Id
    -- app: application instance
    -- scAdmin: subject administration Id
    -- rcAdmin: resource administration Id
    -- tAttr: tentatively updated attribute list
-- 2.Map<SubjectId, SubjectCoordinator>
-- 3.Administration
-- 4.Map<ResourceId, ResourceCoordinator>
-- 5.Administration
-- 6.Response of evaluation
    -- id: assigned global Id
    -- app: application instance
    -- scAdmin: subject administration Id
    -- rcAdmin: resource administration Id
    -- List<Attribute> that should be updated
    -- List<Attribute> that were read