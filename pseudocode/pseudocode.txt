
Name: Zhitao Fan, Chen Dai

### (I) Data Structure

Base message.

```
# Base request and response class
Request
    seq: sequence number unique in current workload
    id: assigned global Id generated in coordiantor
    app: requested application instance
    subject: subject ID
    resource: resource ID
    action: action name

Response
    seq: sequence number unique in current workload
    id: assigned global Id generated in coordiantor
    app: application correspsondent to current request
    subject: subject ID
    resource: resource ID
    action: action name
```

Evaluation message:

```
# Passed through Subject Coordinator to Resource Coordinator to Worker
EvalReq extends Request
    sc: Subject Coordinator correspsondent to current request
    subattr: <attr,value> subject attribute value map, prepared in Subject Coordinator
    resattr: <attr,value> resource attribute value map, prepared in Resource Coordinator

# Returned from Worker to Subject Coordinator
EvalResp extends Response
    decision: true or false represents evaluation result
    subrattr: <attr> subject attributes read during the evaluation
    subwattr: <attr,value> subject attributes update during the evaluation
    resrattr: <attr> resource attributes read during the evaluation
    reswattr: <attr,value> resource attributes update during the evaluation
```

Commit message

```
# Sent from Subject Coordinator to Resource Coordinator
CommitReq extends Request
    resrattr: <attr> resource attributes read during the evaluation
    reswattr: <attr,value> resource attributes update during the evaluation

CommitResp extends Response
    conflict: true or false represents if there is conflict found before commiting resource attribute updates
```


### (II) Master

Master is the bootstrap process of whole system which reads configuration file and starts all other processes to make system ready for testing.

```
# Master

subjects: <subjectID, <attr,value>> prefetched from database
resources: <resourceID, <attr,value>> prefetched from database

run()
    cfg = readConfigFile(argv[1])
    workload = argv[2]

    # 1.Create and start DB and workers
    db = create DB process
    w = create Workers with specific number in config
    setup db with cfg['db']
    start(w)
    start(db)

    # 2.Create and start coordinators
    co = create Coordinators with specific number in config
    start(co)

    # 3.Prefetch subject and resource list from database
    send('getsubs', to=db)
    send('getresos', to=db)
    wait for database response to init subjects and resources list

    # 4.Assign role to coordinators according to total number of subjects and resources
    r = create Router
    r.assign(subjects, resources, co)

    # 5.Prepare coordinator with router table and subject/resource list
    for c in co
        subattrs = dict of <subid, <attr, val>>
        resattrs = dict of <resid, <attr, val>>
        for sub, c2 in router.scmap
            if c == c2
                subattrs[sub] = subjects[sub]
        for res, c2 in router.rcmap
            if c == c2
                resattrs[res] = resources[res]
        send(('prepare', router, subattrs, resattrs), to=c)
    wait shortly for all coordinators to get ready

    # 6.Create application as client and start testing
    apps = create Applications with specific number in config
    for each app in apps
        seqfrom, seqto = Divide total requests evenly and assign sequence number of request to each application
        setup app with (router, seqfrom, seqto)
    start(app)

receive(msg=('subs', subs), from_=db)
    subjects = subs

receive(msg=('resos', resos), from_=db)
    resources = resos
```

Router assigns subject and resource onto coordinators in pool. The following algorithm tries to distribute uniformly. And if conflict, use linear probing simply to address that.

```
# Router

scmap = <subjectID, coordinator>
rcmap = <resourceID, coordinator>

assign(subjects, resources, co)
    total = length of co
    free = total
    occupy = array in free length with all false inside

    # 1.Assign subject to coordinator
    # If found conflict, find next free coordinator (linear probing)
    for sub in subjects
        idx = hash(sub) % total
        if occupy[idx] is True and free > 0
            idx = search_free_co(free, occupy)
        scmap[sub] = co[idx]
        occupy[idx] = True
        free--

    # 2.Assign resource to coordinator, same as above
    for res in resources
        idx = hash(res) % total
        if occupy[idx] is True and free > 0
            idx = search_free_co(free, occupy)
        rcmap[res] = co[idx]
        occupy[idx] = True
        free--

# Search free list to find next one
search_free_co(free, occupy)
    for i in length of occupy
        if occupy[i] is False
            occupy[i] = True
            return i
```


### (III) Application

Now the system is ready for testing. Each application process will start sending request to correspendent coordinator immediately upon running up. The requests carry payload which is described in the configuration file.

```
# parameters passed from Master

1.router: route table of all coordinators
2.seqfrom: the starting sequence number of request that current application should send
3.seqno: the ending sequence number of request that current application should send
4.subjects: all subject ID
5.resources: all resource ID

def run()
    for i from seqfrom to seqto
        # 1.Generate specific or random payload
        req = EvalReq()
        req.seq = i
        prefix = 'req' + i
        req.subject = cfg[prefix + '.subject'] or choose one from subject list randomly if not configured
        req.resource = cfg[prefix + '.resource'] or choose one from resource list randomly if not configured
        req.action = cfg[prefix + '.action']

        # 2.Send to correspondent subject coordinator
        sc = router.scmap[req.subject]
        send(('reqapp', req,), to=sc)

    # 3.Wait for exit command
    await(received('done'))

# Wait for receiving request
receive(msg=('respapp', seq, result,), from_=sc)
    ouput sequence number and correspondent result
```


### (IV) Coordinator

Global variable and preparation.

```
router: Router table
scadmin: Subject Coordinator state administrator
rcadmin: Resource Coordinator state administrator.
idgen: global ID generator
workers: worker pool
db: database instance
cfg: configuration for coordinator

setup(workers, db, cfg)
    create scadmin, rcadmin and idgen instance

run()
    run forever to receive request until terminate command

# Handle 'prepare' message sent from Master
receive(msg=('prepare', router, subattrs, resattrs))
    router = router
    scadmin.init_subcache(subattrs)
    rcadmin.init_rescache(resattrs)
```

Subject Coordinator: As the core process, Coordinator handles only high-level workflow by delegating all relevant state management work to Admin. And same as the following Resource Coordinator in the next section.

```
# 1.Handle request message from Application
# Create context for current request
receive(msg=('reqapp', req,), from_=p)
    generate_global_id(req)
    setup_admin_sc(req)
    prepare_evalreq_sc(req, p)
    enqueue(req.id)
    send(('reqeval', req), to=router.get_rc(req.resource))

# Generate global ID via IdGen utility which use current process ID and an increment counter value as global ID
generate_global_id(req)
    req.id = idgen.next()

# Setup state machine in Admin and transit state to 'reqapp'
setup_admin_sc(req)
    scadmin.setup(req)
    tattrs = scadmin.tattr_cache(req.subject)
    sm = scadmin.states[req.id]
    sm.reqapp(tattrs)

# Prepare parameter in evaluation request
# app isn't None if request from restart
prepare_evalreq_sc(req, p)
    if req.app is None
        req.app = p
    req.subattr = dict()
    tattrs = scadmin.tattr_cache(req.subject)
    for attr, val in tattrs
        req.subattr[attr] = val

# Push into request queue
enqueue(reqid)
    scadmin.push_into_queue(reqid)

# 2.Handle evaluation response from worker
receive(msg=('respeval', resp), from_=p)
    # If delay is necessary, wait for dependent request complete
    while True
        result, depid = is_tattr_or_sub_conflict(resp)
        if result != delay
            break
        await(some(received(('respcommit', depresp)), has= depresp.id==depid))

    # Request RC to commit or restart current request if conflict found
    if result is yes which means conflict
        dequeue(resp.id)
        cleanup_admin_sc(resp)
        send(('reqapp', EvalReq(resp)), to=router.get_sc(resp.subject))
    else
        update_tattr(resp)
        req = prepare_commitreq(resp)
        send(('reqcommit', req), to=router.get_rc(req.resource))

# Check if there is tentative cache or subject DB cache update conflict
is_tattr_or_sub_conflict(resp)
    return scadmin.is_tattr_or_sub_conflict(resp.id, resp.subrattr)

dequeue(reqid)
    scadmin.remove_from_queue(reqid)

update_tattr(resp)
    scadmin.update_tattr(resp.subject, resp.subwattr, resp.id)

cleanup_admin_sc(resp)
    scadmin.clean_state(resp.id)

prepare_commitresp(req)
    return CommitResp(req)

# 3.Receive commit response from Resource Coordinator
# Commit then respond application or rollback and restart if RC failed to commit due to conflict
receive(msg=('respcommit', resp,), from_=p)
    if resp.conflict
        dequeue(resp.id)
        rollback_tattr(resp)
        set_state(resp.id, State.restart)
        cleanup_admin_sc(resp)
        send(('reqapp', EvalReq(resp)), to=router.get_sc(resp.subject))
    else
        dequeue(resp.id)
        commit_sub_to_db(resp)
        set_state(resp.id, State.complete
        send(('respapp', resp.seq, True,), to=resp.app)

rollback_tattr(resp)
    scadmin.rollback_tattr(resp.id)

set_state(reqid, state)
    if reqid in scadmin.states
        sm = scadmin.states[reqid]
    else
        sm = rcadmin.states[reqid]
    sm.state = state

commit_sub_to_db(resp)
    scadmin.commit_sub(resp.subject)
    subcommit = copy from scadmin.cache.subcache without reqid
    send(('writesubattr', subcommit), to=scadmin.db)
```

Resource Coordinator

```
# 1.Receive evaluation request from Subject Coordinator
# Prepare request then send to work which is chosen in Round-Robin style
receive(msg=('reqeval', req,), from_=p)
    setup_admin_rc(req)
    prepare_evalreq_rc(req, p)
    worker = next(iter(workers))
    send(('assigneval', req), to=worker)

# 2.Receive commit request from Subject Coordinator
# Commit then respond application or rollback and restart if RC failed to commit due to conflict
receive(msg=('reqcommit', req,), from_=p)
    resp = prepare_commitresp(req)
    if is_res_conflict(req)
        cleanup_admin_rc(req)
        resp.conflict = True
    else
        commit_res_to_db(req)
        set_state(req.id, State.complete)
        resp.conflict = False
    send(('respcommit', resp), to=p)

setup_admin_rc(req)
    if req.id in rcadmin.states
        rcadmin.clean_state(req.id)
    rcadmin.setup(req)
    attrs = rcadmin.res_cache(req.resource)
    sm = rcadmin.states[req.id]
    sm.reqeval(attrs)

prepare_evalreq_rc(req, p)
    req.sc = p
    attrs = rcadmin.res_cache(req.resource)
    for attr, val in attrs
        req.resattr[attr] = val

is_res_conflict(req)
    sm = rcadmin.states[req.id]
    attrs = rcadmin.res_cache(req.resource)
    return sm.reqcommit(req, attrs) == False

cleanup_admin_rc(req)
    rcadmin.clean_state(req.id)

commit_res_to_db(req)
    rcadmin.commit_res(req.resource, req.reswattr)
    send(('writeresattr', rcadmin.cache.rescache), to=rcadmin.db)

```

### Helper Class for State Management

Admin: A Facade to access low-level class such as Cache and State Machine.

```
db: Database instance
cache: Cache instance
states: <reqid, StateMachine> map
q: Request queue [reqid1, reqid2...]

setup(req)
    states[req.id] = StateMac(req)

# subattrs is None means current Coordinator has no SC/RC role
# So there is no need to preload data into cache
init_subcache(subattrs)
    for sub, attrs in subattrs
        cache.init_subcache((sub, attrs))

init_rescache(resattrs)
    for res, attrs in resattrs
        cache.init_rescache((res, attrs))

clean_state(reqid)
    states[reqid].subdep = None
    states[reqid].resdep = None
    states[reqid].subrattr = None

tattr_cache(subid)
    return cache.query_tattr(subid)

res_cache(resid)
    return cache.query_rescache(resid)

is_tattr_or_sub_conflict(reqid, subrattr)
    sm = states[reqid]
    deps = states
    tattr = tattr_cache(sm.subid)
    return sm.respeval(subrattr, deps, tattr)

update_tattr(subid, attrs, reqid)
    cache.update_tattr(subid, attrs, reqid)

push_into_queue(reqid)
    q.put(states[reqid])

remove_from_queue(reqid)
    return q.get()

commit_sub(subid)
    cache.commit_tattr(subid)

commit_res(resid, attrs)
    cache.commit_rescache(resid, attrs)

rollback_tattr(reqid)
    sm = states[reqid]
    tattr = cache.query_tattr(sm.subid)
    subcache = cache.query_subcache(sm.subid)
    sm.rollback(tattr, subcache, q)
```

Cache: Cache manager of the tentative cache, subject database cache and resource database cache.

```
tattr: Tentative update cache - <subid, <attr, (val, ts, reqid)>>
subcache: Subject DB cache - <subid, <attr, (val, ts, reqid)>>
rescache: Resource DB cache - <resid, <attr, (val, ts)>>

# Initially, reqid field are all None
init_subcache(subattrs)
    subid = subattrs[0]
    data = subattrs[1]
    for attr, val in data
        tattrs[subid][attr] = (val, current time, None)
        subcache[subid][attr] = (val, current time, None)

init_rescache(resattrs)
    resid = resattrs[0]
    data = resattrs[1]
    for attr, val in data
        rescache[resid][attr] = (val, current time)

query_tattr(subid)
    return tattrs[subid]

query_subcache(subid)
    return subcache[subid]

update_tattr(subid, attrs, reqid)
    for attr, newval in attrs
        tattrs[subid][attr] = (newval, current time, reqid)

commit_tattr(subid)
    for attr, newval, ts, reqid in tattrs[subid]
        subcache[subid][attr] = (newval, ts, reqid)

query_rescache(resid)
    return rescache[resid]

commit_rescache(resid, attrs)
    for attr, newval in attrs
        rescache[resid][attr] = (newval, current time)
```

StateMac: Transit among states and validate (check conflict) before performing actual transition.

```
State Enum: init, reqapp, respeval, respcommit, reqeval, reqcommit, restart, complete
Conflict Enum: yes no delay
Index of tuple: VAL = 0, TS = 1, ID = 2

state: current state, set to State.init initially
seq, id, subid, resid: basic info got from current request
subdep: subject attribute dependency info of current evalution <attr, (val, ts, reqid)>
resdep: resource attribute dependency info of current evalution <attr, (val, ts)>
subrattr: subject attribute actually read in current evalution

reqapp(tattrs)
    for attr, reqid, val, ts in tattrs
        subdep[attr] = (reqid, val, ts)
    state = State.reqapp

respeval(subrattr, deps, tattrs)
    # 1.Tentative update dependency check
    for attr in subrattr
        depid = subdep[attr][ID]
        if depid is None
            continue

        depstate = deps[depid].state
        if depstate == State.restart
            state = State.restart
            return Conflict.yes, None

        if depstate != State.complete
            return Conflict.delay, depid

    # 2.Subject update conflict check
    for attr in subrattr
        if subdep[attr][TS] != tattrs[attr][TS]
            state = State.restart
            return Conflict.yes, None

    # Save subject read attributes in case of rollback
    subrattr = set(subrattr)
    return Conflict.no, None

reqeval(attrs)
    for attr, (val, ts) in attrs
        resdep[attr] = (val, ts)
    state = State.reqeval

reqcommit(resp, attrs)
    for attr in resp.resrattr
        if resdep[attr][TS] != attrs[attr][TS]
            state = State.restart
            return False
    state = State.reqcommit
    return True

# Just rollback updated value which cause dependent request being restarted as well. Instead of leaving this work to last dependent request, this can prevent the live lock.
rollback(tattr, subcache, q)
    # Find attr updated by current request
    for attr, reqid in tattr
        if reqid != id
            continue
        tattr[attr] = subcache[attr]
```


### (V) Worker

## Major task: evaluation request.

init():
    send('get_policy', to=database)

## message handlers

# policy response
receive(msg=('policy', p), from=database):
    policy = p 

# resource coordinator assigning evaluation message
receive(msg=('assign_evalutaion', request), from=rc):
    response, matched_rule = evaluate(request)
    if response.decision == True:
        # udpate write attributes per obligation in matched rule
        fulfill_obligation(matched_rule, response)
    # send evaluation result to corresponding subject coordinator
    send(msg=('evaluation_result', response), to=request.sc)

## helper functions

evaluate(EvalReq request):
    response = new EvalResp()
    for rule in policy.getAll('rule'):
        result = try_to_match(rule, request.attributes)
        if result:
            matched_rule = rule
            break # found the corresponding rule and no need to continue the loop

    if matched_rule == null:
        # no corresponding rule found
        # therefore, request will be denied
        # no obligation will be fulfilled, either.
        response.decision = False
    else:
        response.decision = True

    return response, matched_rule

bool try_to_match(dict attrs_in_rule, dict attrs_in_req):
    for (key, value) in attrs_in_rule:
        if attrs_in_req.find(key, value) == failed:
            return False
    # if reaches this line, it means that all subject, resource,
    # and action condition satisfied
    return True

fulfill_obligation(dict rule, dict write_attributes):
    if rule.contains('subjectUpdate' or 'resourceUpdate'):
        for entry in rule:
            # format [which_attribute]=['++' / '--']
            update(write_attributes[entry.key], entry.value)

### (VI) Database Emulator

## Dealing with reads and writes requested by coodinators
## and read policy and records requests from workers

init():
    rules = parse(policy_filename)
    sub_records, res_records, action_list = parse(init_data_filename)
    minDBlatency, maxDBlatency = load(config_filename)

run():
    # listen to read and write record messages from coordinators and workers
    await(received((message))

# read message handlers
receive(msg='read_subject', sub_id):
    return sub_records[sub_id]

receive(msg='read_resource', res_id):
    return res_records[res_id]

# write message handlers
receive(msg='write_subject', new_record):
    l = random(minDBlatency, maxDBlatency)
    delay(l)
    # ensure record received is newer than that in database
    id = new_record.get('id')
    if new_record.get('timestamp') > sub_records[id].get('timestamp'):
        sub_records[id] = new_record

receive(msg='write_resource', new_record):
    l = random(minDBlatency, maxDBlatency)
    delay(l)
    id = new_record.get('id')
    if new_record.get('timestamp') > res_records[id].get('timestamp'):
        res_records[id] = new_record
